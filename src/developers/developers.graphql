type Developer {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  skills: [Skill!]!
}

type Skill {
  language: String
  framework: String
}

input SkillInput {
  language: String
  framework: String
}

input DeveloperFilterInput {
  language: String
  framework: String
}

input CreateDeveloperInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  skills: [SkillInput!]!
}

input UpdateDeveloperInput {
  id: Int!
}

input SortByParams {
  field: String
  direction: String
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
}

type Query {
  developers(sortBy: SortByParams): [Developer]!
  developersWithFilter(filter: DeveloperFilterInput): [Developer]!
}

type Mutation {
  createDeveloper(createDeveloperInput: CreateDeveloperInput!): Developer!
  updateDeveloper(updateDeveloperInput: UpdateDeveloperInput!): Developer!
  removeDeveloper(id: Int!): Developer
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
}
